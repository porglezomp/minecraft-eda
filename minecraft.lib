// A cell library for redstone circuits
library(redstone) {
  cell(REPEATER) {
    area: 3;
    pin(A) { direction: input; }
    pin(Y) { direction: output; function: "A"; }
  }
  // @TODO: Nail down how we count area.
  cell(NOT) {
    area: 4;
    pin(A) { direction: input; }
    pin(Y) { direction: output; function: "!A"; }
  }
  cell(AND) {
    area: 10;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(Y) { direction: output; function: "A & B"; }
  }
  cell(NAND) {
    area: 9;
    pin(A,B) { direction: input; }
    pin(Y) { direction: output; function: "!(A & B)"; }
  }
  cell(OR) {
    area: 3;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(Y) { direction: output; function: "A | B"; }
  }
  cell(NOR) {
    area: 4;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(Y) { direction: output; function: "!(A | B)"; }
  }
  cell(AND3) {
    area: 16;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(Y) { direction: output; function: "A & B & C"; }
  }
  cell(NAND3) {
    area: 15;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(Y) { direction: output; function: "!(A & B & C)"; }
  }
  cell(OR3) {
    area: 4;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(Y) { direction: output; function: "A | B | C"; }
  }
  cell(NOR3) {
    area: 5;
    pin(A) { direction: input; }
    pin(B) { direction: input; }
    pin(C) { direction: input; }
    pin(Y) { direction: output; function: "!(A | B | C)"; }
  }
  cell(DFF_P) {
    area: 8;
    ff(IQ, IQN) { clocked_on: C; next_state: D; }
    pin(C) { direction: input; clock: true; }
    pin(D) { direction: input; }
    pin(Q) { direction: output; function: "IQ"; }
  }
  cell(DFF_N) {
    area: 8;
    ff(IQ, IQN) { clocked_on: "!C"; next_state: D; }
    pin(C) { direction: input; clock: true; }
    pin(D) { direction: input; }
    pin(Q) { direction: output; function: "IQ"; }
  }
  // @TODO: Is there a good DFFE design?
}
